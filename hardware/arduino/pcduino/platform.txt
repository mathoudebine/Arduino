
# AVR compile variables
# --------------------- 

name=pcDuino Boards
version=1.5.3
# Default "compiler.path" is correct, change only if you want to overidde the initial value
compiler.path=/usr/bin/
compiler.c.cmd=g++
compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD -DPCDUINO_IDE
compiler.c.elf.flags=-Os -Wl,--gc-sections
compiler.c.elf.cmd=g++
compiler.S.flags=-c -g -assembler-with-cpp
compiler.cpp.cmd=g++
compiler.cpp.flags=-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -MMD -DPCDUINO_IDE
compiler.ar.cmd=ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd=objcopy
compiler.ldflags=
compiler.size.cmd=size
# this can be overriden in boards.txt
build.extra_flags=

# AVR compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags}  {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -lm

## Create eeprom
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.flags} "{build.path}/{build.project_name}" "{build.path}/{build.project_name}.eep"

## Create hex
#recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}" "{build.path}/{build.project_name}.hex"
#recipe.objcopy.hex.pattern=/usr/bin/lxterminal -t "{build.project_name}" -e "{build.path}/{build.project_name}.elf"
recipe.objcopy.hex.pattern=/bin/cp "{build.path}/{build.project_name}" "{sketchbook.path}"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}"
recipe.size.regex=Total\s+([0-9]+).*


# AVR Uploader/Programmers tools
# -------------------

tools.avrdude.cmd.path=/usr/bin/avrdude
tools.avrdude.config.path=/etc/avrdude.conf
tools.avrdude.cmd.path.linux=/usr/bin/avrdude
tools.avrdude.config.path.linux=/etc/avrdude.conf

tools.avrdude.upload.params.verbose=-v -v -v -v
tools.avrdude.upload.params.quiet=-q -q
#tools.avrdude.upload.pattern="{path}/{cmd}" -c "{build.path}/{build.project_name}"
tools.avrdude.upload.pattern=/usr/bin/lxterminal -l -t "{build.project_name}" -e "sudo {build.path}/{build.project_name}"

tools.avrdude.program.params.verbose=-v -v -v -v
tools.avrdude.program.params.quiet=-q -q
tools.avrdude.program.pattern="{cmd.path}" "-C{config.path}" {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude.erase.params.verbose=-v -v -v -v
tools.avrdude.erase.params.quiet=-q -q
tools.avrdude.erase.pattern="{cmd.path}" "-C{config.path}" {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m

tools.avrdude.bootloader.params.verbose=-v -v -v -v
tools.avrdude.bootloader.params.quiet=-q -q
tools.avrdude.bootloader.pattern="{cmd.path}" "-C{config.path}" {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{runtime.ide.path}/hardware/arduino/avr/bootloaders/{bootloader.file}:i" -Ulock:w:{bootloader.lock_bits}:m

